# -*- coding: utf-8 -*-
# @Author  : ruiwu
# @Email   : ryanwoo@zju.edu.cn
# @Title   : 8 字符串转换整数 (atoi)
# @Content : 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
#            函数 myAtoi(string s) 的算法如下：
#                1) 读入字符串并丢弃无用的前导空格
#                2) 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。
#                   确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
#                3) 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
#                4) 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没
#                   有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
#                5) 如果整数数超过 32 位有符号整数范围 [−231, 231 − 1] ，需要截断这个整数，使其保持
#                   在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数
#                   应该被固定为 231 − 1 。
#                6) 返回整数作为最终结果。
#       注意 : 本题中的空白字符只包括空格字符 ' ' 。
#             除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。


class Solution:
    def myAtoi(self, s: str) -> int:
        ls = list(s.strip())
        if len(ls) == 0:
            return 0
        else:
            sign = -1 if ls[0] == '-' else 1
        if ls[0] in ['-', '+']: del ls[0]
        ret, i = 0, 0
        while i < len(ls) and ls[i].isdigit():
            ret = ret * 10 + ord(ls[i]) - ord('0')
            i += 1
        return max(-2**31, min(sign * ret, 2**31-1))


if __name__ == '__main__':
    # case1  res = 42
    # 解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
    # 第 1 步："42"（当前没有读入字符，因为没有前导空格）
    #          ^
    # 第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
    #          ^
    # 第 3 步："42"（读入 "42"）
    #            ^
    # 解析得到整数 42 。
    # 由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。
    s1 = "42"

    # case2  res = -42
    # 解释：
    # 第 1 步："   -42"（读入前导空格，但忽视掉）
    #             ^
    # 第 2 步："   -42"（读入 '-' 字符，所以结果应该是负数）
    #              ^
    # 第 3 步："   -42"（读入 "42"）
    #                ^
    # 解析得到整数 -42 。
    # 由于 "-42" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。
    s2 = "   -42"

    # case3  res = 4193
    # 解释：
    # 第 1 步："4193 with words"（当前没有读入字符，因为没有前导空格）
    #          ^
    # 第 2 步："4193 with words"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
    #          ^
    # 第 3 步："4193 with words"（读入 "4193"；由于下一个字符不是一个数字，所以读入停止）
    #              ^
    # 解析得到整数 4193 。
    # 由于 "4193" 在范围 [-231, 231 - 1] 内，最终结果为 4193 。
    s3 = "4193 with words"

    # case4  res = 0
    # 解释：
    # 第 1 步："words and 987"（当前没有读入字符，因为没有前导空格）
    #          ^
    # 第 2 步："words and 987"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
    #          ^
    # 第 3 步："words and 987"（由于当前字符 'w' 不是一个数字，所以读入停止）
    #          ^
    # 解析得到整数 0 ，因为没有读入任何数字。
    # 由于 0 在范围 [-231, 231 - 1] 内，最终结果为 0 。
    s4 = "words and 987"

    # case5  res = -2147483648
    # 解释：
    # 第 1 步："-91283472332"（当前没有读入字符，因为没有前导空格）
    #          ^
    # 第 2 步："-91283472332"（读入 '-' 字符，所以结果应该是负数）
    #           ^
    # 第 3 步："-91283472332"（读入 "91283472332"）
    #                      ^
    # 解析得到整数 -91283472332 。
    # 由于 -91283472332 小于范围 [-231, 231 - 1] 的下界，最终结果被截断为 -231 = -2147483648 。
    s5 = "-91283472332"

    sol = Solution()
    res1 = sol.myAtoi(s1)
    res2 = sol.myAtoi(s2)
    res3 = sol.myAtoi(s3)
    res4 = sol.myAtoi(s4)
    res5 = sol.myAtoi(s5)
    print('case1:', res1)
    print('case2:', res2)
    print('case3:', res3)
    print('case4:', res4)
    print('case5:', res5)