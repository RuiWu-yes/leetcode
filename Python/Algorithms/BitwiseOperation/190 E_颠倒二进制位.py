# -*- coding: utf-8 -*-
# @Author  : ruiwu
# @Email   : ryanwoo@zju.edu.cn
# @Title   : 190 颠倒二进制位
# @Content : 颠倒给定的 32 位无符号整数的二进制位。
# @    进阶 : 如果多次调用这个函数，你将如何优化你的算法？


class Solution:
    def reverseBits(self, n: int) -> int:
        pass


if __name__ == '__main__':
    # case1  res = 00111001011110000010100101000000
    # 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
    #      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
    n1 = 43261596

    # case2  res = 10111111111111111111111111111111
    # 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
    #      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
    n2 = 4294967293

    sol = Solution()
    res1 = sol.reverseBits(n1)
    res2 = sol.reverseBits(n2)
    print('case1:', res1)
    print('case2:', res2)